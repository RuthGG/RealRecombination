toPlot<-toPlot[which(toPlot$InvSubset.count == "count.all" | (toPlot$InvSubset.count != "count.all" & toPlot$cM.Mb.sum != 0)),]
toPlot$outlier<-NA
for(i in levels(toPlot$InvSubset.count)){
toPlot[ toPlot$InvSubset.count == i, "outlier"] <- ifelse(is_outlier((toPlot[ toPlot$InvSubset.count == i, "Inv.count"])), paste( as.character(toPlot[ toPlot$InvSubset.count == i, c("donor")]),  as.character(toPlot[ toPlot$InvSubset.count == i, c("chr")]), sep =","), NA )
}
pA<-ggplot(toPlot, aes(y = (Inv.count), x = TypeOfAberration))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 1))+
facet_grid(InvSubset.count~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 1), size = 3 ,hjust = -0.2)+
ggtitle("General inv count  outliers")
pA
ggplot(toPlot, aes(y = (Inv.count), x = TypeOfAberration))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 1, height = 0, width = 3))+
facet_grid(InvSubset.count~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 1, height = 0, width = 3), size = 3 ,hjust = -0.2)+
ggtitle("General inv count  outliers")
ggplot(toPlot, aes(y = (Inv.count), x = TypeOfAberration))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 1, height = 0.2, width = 3))+
facet_grid(InvSubset.count~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 1, height = 0.2, width = 3), size = 3 ,hjust = -0.2)+
ggtitle("General inv count  outliers")
# LIST OF POINT OUTLIERS for inversion count - and ind with more invs than expected
toPlot<-TestDataset.long.small[TestDataset.long.small$InvSubset.count == "count.all",]
# toPlot<-toPlot[which(toPlot$InvSubset.count == "count.all" | (toPlot$InvSubset.count != "count.all" & toPlot$cM.Mb.sum != 0)),]
toPlot$outlier<-NA
toPlot<-TestDataset.long.small[TestDataset.long.small$InvSubset.count == "count.all",]
# toPlot<-toPlot[which(toPlot$InvSubset.count == "count.all" | (toPlot$InvSubset.count != "count.all" & toPlot$cM.Mb.sum != 0)),]
toPlot$outlier<-NA
for(i in levels(toPlot$TypeOfAberration)){
toPlot[ toPlot$TypeOfAberration == i, "outlier"] <- ifelse(is_outlier((toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])), paste( as.character(toPlot[ toPlot$TypeOfAberration == i, c("donor")]),  as.character(toPlot[ toPlot$TypeOfAberration == i, c("chr")]), sep =","), NA )
}
pA<-ggplot(toPlot, aes(y = (NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 1, height = 0.2, width = 3))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 1, height = 0.2, width = 3), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
pA
ggplot(toPlot, aes(y = (NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0.2, width = 3))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0.2, width = 3), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
ggplot(toPlot, aes(y = (NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0.2, width = 1.5))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0.2, width = 1.5), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
ggplot(toPlot, aes(y = (NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0.2, width = 1))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0.2, width = 1), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
ggplot(toPlot, aes(y = (NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0.2, width = 0.9))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0.2, width = 0.9), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
ggplot(toPlot, aes(y = (NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0.2))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0.2), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
ggplot(toPlot, aes(y = log10(NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0.2))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0.2), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
toPlot<-TestDataset.long.small[TestDataset.long.small$InvSubset.count == "count.all",]
# toPlot<-toPlot[which(toPlot$InvSubset.count == "count.all" | (toPlot$InvSubset.count != "count.all" & toPlot$cM.Mb.sum != 0)),]
toPlot$outlier<-NA
for(i in levels(toPlot$TypeOfAberration)){
toPlot[ toPlot$TypeOfAberration == i, "outlier"] <- ifelse(is_outlier(log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])), paste( as.character(toPlot[ toPlot$TypeOfAberration == i, c("donor")]),  as.character(toPlot[ toPlot$TypeOfAberration == i, c("chr")]), sep =","), NA )
}
pB<-ggplot(toPlot, aes(y = log10(NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0.2))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0.2), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
pB
is_outlier(log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"]))
log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])
is_outlier <- function(x) {
x[x %in% c(Inf, -Inf)]<-NA
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
toPlot<-TestDataset.long.small[TestDataset.long.small$InvSubset.count == "count.all",]
# toPlot<-toPlot[which(toPlot$InvSubset.count == "count.all" | (toPlot$InvSubset.count != "count.all" & toPlot$cM.Mb.sum != 0)),]
toPlot$outlier<-NA
for(i in levels(toPlot$TypeOfAberration)){
toPlot[ toPlot$TypeOfAberration == i, "outlier"] <- ifelse(is_outlier(log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])), paste( as.character(toPlot[ toPlot$TypeOfAberration == i, c("donor")]),  as.character(toPlot[ toPlot$TypeOfAberration == i, c("chr")]), sep =","), NA )
}
pB<-ggplot(toPlot, aes(y = log10(NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0.2))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0.2), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
is_outlier <- function(x) {
x[x %in% c(Inf, -Inf)]<-NA
return(x < quantile(x, 0.25, na.rm = T) - 1.5 * IQR(x) | x > quantile(x, 0.75, na.rm = T) + 1.5 * IQR(x))
}
toPlot<-TestDataset.long.small[TestDataset.long.small$InvSubset.count == "count.all",]
# toPlot<-toPlot[which(toPlot$InvSubset.count == "count.all" | (toPlot$InvSubset.count != "count.all" & toPlot$cM.Mb.sum != 0)),]
toPlot$outlier<-NA
for(i in levels(toPlot$TypeOfAberration)){
toPlot[ toPlot$TypeOfAberration == i, "outlier"] <- ifelse(is_outlier(log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])), paste( as.character(toPlot[ toPlot$TypeOfAberration == i, c("donor")]),  as.character(toPlot[ toPlot$TypeOfAberration == i, c("chr")]), sep =","), NA )
}
# LIST OF POINT OUTLIERS for inversion count - and ind with more invs than expected
toPlot<-TestDataset.long.small[TestDataset.long.small$InvSubset.count == "count.all",]
# toPlot<-toPlot[which(toPlot$InvSubset.count == "count.all" | (toPlot$InvSubset.count != "count.all" & toPlot$cM.Mb.sum != 0)),]
toPlot$outlier<-NA
for(i in levels(toPlot$TypeOfAberration)){
toPlot[ toPlot$TypeOfAberration == i, "outlier"] <- ifelse(is_outlier(log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])), paste( as.character(toPlot[ toPlot$TypeOfAberration == i, c("donor")]),  as.character(toPlot[ toPlot$TypeOfAberration == i, c("chr")]), sep =","), NA )
}
is_outlier <- function(x) {
x[x %in% c(Inf, -Inf)]<-NA
return(x < quantile(x, 0.25, na.rm = T) - 1.5 * IQR(x) | x > quantile(x, 0.75, na.rm = T) + 1.5 * IQR(x))
}
for(i in levels(toPlot$TypeOfAberration)){
toPlot[ toPlot$TypeOfAberration == i, "outlier"] <- ifelse(is_outlier(log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])), paste( as.character(toPlot[ toPlot$TypeOfAberration == i, c("donor")]),  as.character(toPlot[ toPlot$TypeOfAberration == i, c("chr")]), sep =","), NA )
}
x
for(i in levels(toPlot$TypeOfAberration)){
x<-log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])
)
for(i in levels(toPlot$TypeOfAberration)){
x<-log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"]))
for(i in levels(toPlot$TypeOfAberration)){
x<-log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])
x<-log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])
x<-log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])
quantile(x, 0.25, na.rm = T)
x[x %in% c(Inf, -Inf)]<-NA
x
quantile(x, 0.25, na.rm = T)
quantile(x, 0.75, na.rm = T)
(x < quantile(x, 0.25, na.rm = T) - 1.5 * IQR(x) | x > quantile(x, 0.75, na.rm = T) + 1.5 * IQR(x))
is_outlier <- function(x) {
x[x %in% c(Inf, -Inf)]<-NA
return(x < quantile(x, 0.25, na.rm = T) - 1.5 * IQR(x) | x > quantile(x, 0.75, na.rm = T) + 1.5 * IQR(x, na.rm = T))
}
toPlot<-TestDataset.long.small[TestDataset.long.small$InvSubset.count == "count.all",]
# toPlot<-toPlot[which(toPlot$InvSubset.count == "count.all" | (toPlot$InvSubset.count != "count.all" & toPlot$cM.Mb.sum != 0)),]
toPlot$outlier<-NA
for(i in levels(toPlot$TypeOfAberration)){
toPlot[ toPlot$TypeOfAberration == i, "outlier"] <- ifelse(is_outlier(log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])), paste( as.character(toPlot[ toPlot$TypeOfAberration == i, c("donor")]),  as.character(toPlot[ toPlot$TypeOfAberration == i, c("chr")]), sep =","), NA )
}
pB<-ggplot(toPlot, aes(y = log10(NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0.2))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0.2), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
# LIST OF POINT OUTLIERS for inversion count - and ind with more invs than expected
toPlot<-TestDataset.long.small[TestDataset.long.small$InvSubset.count == "count.all",]
# toPlot<-toPlot[which(toPlot$InvSubset.count == "count.all" | (toPlot$InvSubset.count != "count.all" & toPlot$cM.Mb.sum != 0)),]
toPlot$outlier<-NA
for(i in levels(toPlot$TypeOfAberration)){
toPlot[ toPlot$TypeOfAberration == i, "outlier"] <- ifelse(is_outlier(log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])), paste( as.character(toPlot[ toPlot$TypeOfAberration == i, c("donor")]),  as.character(toPlot[ toPlot$TypeOfAberration == i, c("chr")]), sep =","), NA )
}
x
(x < quantile(x, 0.25, na.rm = T) - 1.5 * IQR(x) | x > quantile(x, 0.75, na.rm = T) + 1.5 * IQR(x, na.rm = T))
(x < quantile(x, 0.25, na.rm = T) - 1.5 * IQR(x, na.rm = T) | x > quantile(x, 0.75, na.rm = T) + 1.5 * IQR(x, na.rm = T))
is_outlier <- function(x) {
x[x %in% c(Inf, -Inf)]<-NA
return(x < quantile(x, 0.25, na.rm = T) - 1.5 * IQR(x, na.rm = T) | x > quantile(x, 0.75, na.rm = T) + 1.5 * IQR(x, na.rm = T))
}
toPlot<-TestDataset.long.small[TestDataset.long.small$InvSubset.count == "count.all",]
# toPlot<-toPlot[which(toPlot$InvSubset.count == "count.all" | (toPlot$InvSubset.count != "count.all" & toPlot$cM.Mb.sum != 0)),]
toPlot$outlier<-NA
for(i in levels(toPlot$TypeOfAberration)){
toPlot[ toPlot$TypeOfAberration == i, "outlier"] <- ifelse(is_outlier(log10(toPlot[ toPlot$TypeOfAberration == i, "NumOfAberrations"])), paste( as.character(toPlot[ toPlot$TypeOfAberration == i, c("donor")]),  as.character(toPlot[ toPlot$TypeOfAberration == i, c("chr")]), sep =","), NA )
}
pB<-ggplot(toPlot, aes(y = log10(NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0.2))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0.2), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
p
pB
gplot(toPlot, aes(y = log10(NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
ggplot(toPlot, aes(y = log10(NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
ggplot(toPlot, aes(y = (NumOfAberrations), x = InvSubset.count))+geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color = donor), position = position_jitter(seed = 2, height = 0))+
facet_grid(TypeOfAberration~.)+
geom_text(aes(label = outlier),position = position_jitter(seed = 2, height = 0), size = 3 ,hjust = -0.2)+
ggtitle("General ab count  outliers")
lm(totalArmLosses ~ donor, chr, cells, xperchr,crossovers, count.all, cM.QN.sum.all, count.centro, cM.QN,sum.centro, count.big, cM.QN.sum.big , TestDataset)
lm(totalArmLosses ~ donor + chr+ cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN+sum.centro+ count.big+ cM.QN.sum.big , TestDataset)
lm(totalArmLosses ~ donor + chr+ cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro+ count.big+ cM.QN.sum.big , TestDataset)
m<-lm(totalArmLosses ~ donor + chr+ cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro+ count.big+ cM.QN.sum.big , TestDataset)
summary(m)
m<-lm(totalArmLosses ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro+ count.big+ cM.QN.sum.big , TestDataset)
summary(m)
performance::check_model(m)
m<-lm(totalArmLosses ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro, TestDataset)
summary(m)
performance::check_model(m)
m<-lm(totalArmLosses ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro, TestDataset[TestDataset$telocentric == "No-telocetric" ])
TestDataset[TestDataset$telocentric == "No-telocetric" ])
TestDataset[TestDataset$telocentric == "No-telocetric", ]
TestDataset[TestDataset$telocentric == "No-Telocetric", ]
TestDataset[TestDataset$telocentric == "No-Telocentric", ]
m<-lm(totalArmLosses ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro, TestDataset[TestDataset$telocentric == "No-Telocentric", ])
summary(m)
performance::check_model(m)
m<-lm(log10(totalArmLosses) ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro, TestDataset[TestDataset$telocentric == "No-Telocentric" &, ])
summary(m)
performance::check_model(m)
m<-lm(log10(totalArmLosses) ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro, TestDataset[TestDataset$telocentric == "No-Telocentric" , ])
summary(m)
performance::check_model(m)
m<-lm(sqrt(totalArmLosses) ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro, TestDataset[TestDataset$telocentric == "No-Telocentric" , ])
summary(m)
performance::check_model(m)
m<-lm(sqrt(totalArmGains) ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro, TestDataset[TestDataset$telocentric == "No-Telocentric" , ])
summary(m)
performance::check_model(m)
m<-lm(sqrt(totalArmLosses) ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro, TestDataset[TestDataset$telocentric == "No-Telocentric" , ])
summary(m)
performance::check_model(m)
m<-lm(sqrt(totalArmLosses) ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro, TestDataset[TestDataset$telocentric == "No-Telocentric" & !(TestDataset$chr %in% c("chr8", "chr9")) , ])
summary(m)
performance::check_model(m)
m<-lm(sqrt(totalArmLosses) ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro + totalArmLevelStructuralVariants, TestDataset[TestDataset$telocentric == "No-Telocentric" ])
m<-lm(sqrt(totalArmLosses) ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro + totalArmLevelStructuralVariants, TestDataset[TestDataset$telocentric == "No-Telocentric" ,])
summary(m)
performance::check_model(m)
m<-lm(sqrt(totalArmLosses) ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro , TestDataset[TestDataset$telocentric == "No-Telocentric" ,])
summary(m)
performance::check_model(m)
#---- liear
m<-lm((totalArmLosses) ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro , TestDataset[TestDataset$telocentric == "No-Telocentric" ,])
summary(m)
performance::check_model(m)
m<-lm(totalArmLosses ~  cells+ xperchr+crossovers+ count.all+ cM.QN.sum.all+ count.centro+ cM.QN.sum.centro , TestDataset[TestDataset$telocentric == "No-Telocentric" ,])
summary(m)
performance::check_model(m)
#----- ordinal
TestDataset$totalArmLosses.ordinal<-factor(TestDataset$totalArmLosses,ordered = T)
TestDataset$totalArmLosses.ordinal
View(TestDataset)
analyze<- TestDataset[TestDataset$telocentric == "No-Telocentric" & TestDataset$totalArmLosses != 8 ,]
analyze
analyze$totalArmLosses.ordinal
pacman::p_load(MASS)
mod<-polr(myFormula, data = analysis, Hess = T)
analyze<- TestDataset[TestDataset$telocentric == "No-Telocentric" & TestDataset$totalArmLosses != 8 ,]
mod<-polr(myFormula, data = analysis, Hess = T)
mod<-polr(myFormula, data = analyze, Hess = T)
mod<-polr(totalArmLosses.ordinal ~  scale(cells)+ scale(xperchr)+scale(crossovers)+ scale(count.all)+ scale(cM.QN.sum.all)+ scale(count.centro)+ scale(cM.QN.sum.centro) , data = analyze, Hess = T)
scale(analyze$cells)
scale(analyze$xperchr)
#----- ordinal
TestDataset$totalArmLosses.ordinal<-factor(TestDataset$totalArmLosses,ordered = T)
analyze<- TestDataset[TestDataset$telocentric == "No-Telocentric" & TestDataset$totalArmLosses != 8 ,]
pacman::p_load(MASS)
mod<-polr(totalArmLosses.ordinal ~  scale(cells)+ scale(xperchr)+scale(crossovers)+ scale(count.all)+ scale(cM.QN.sum.all)+ scale(count.centro)+ scale(cM.QN.sum.centro) , data = analyze, Hess = T)
summary(mod)
mod<-polr(totalArmLosses.ordinal ~  scale(cells)+ scale(xperchr)+scale(crossovers)+ scale(count.all)+ scale(cM.QN.sum.all), data = analyze, Hess = T)
mod<-polr(totalArmLosses.ordinal ~  scale(cells), data = analyze, Hess = T)
mod<-polr(totalArmLosses.ordinal ~  scale(cells)+ scale(xperchr)+scale(crossovers), data = analyze, Hess = T)
summary(mod)
mod<-polr(totalArmLosses.ordinal ~  scale(cells)+ scale(xperchr)+scale(crossovers), data = analyze, Hess = T)
ci <- confint(mod)
## Store summary table
ctable <- coef(summary(mod))
## Calculate and store p values
p <- round(pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2, 8)
## combined table
ctable <- cbind(ctable, "p value" = p)
CIodds<-data.frame(exp(cbind(OR = coef(mod), ci)))
colnames(CIodds)<-c("Odds Ratio", "2.5%", "97.5%")
pacman::p_load("ggplot2")
# Finally, a summary of the model
CIodds$Variable<-rownames(CIodds)
ctable<-data.frame(ctable)
ctable$Variable<-rownames(ctable)
CIodds<-merge(CIodds, ctable)
CIodds$sig<-ifelse(CIodds$p.value < 0.05, T, F)
# Misclassification error
#Compute confusion table and misclassification error
predictOLR <-  predict(mod,winRegions)
cTab <- table(winRegions$invCategory, predictOLR)
mean(as.character(winRegions$invCategory) != as.character(predictOLR))
# Load the DescTools package for calculate the R square
pacman::p_load("DescTools")
# Calculate the R Square
PseudoR2(mod, which = c("CoxSnell","Nagelkerke","McFadden"))
pacman::p_load("brant", "Hmisc")
btest<-brant(mod)
pacman::p_load(ggpubr)
pvalsb<-data.frame(btest[,3])
pvalsb$Variable<-rownames(pvalsb)
ctable<-merge(ctable, pvalsb)
ctable$OddsRatio<-exp(ctable$Value)
ctable<-ctable[,c("Variable","Value","OddsRatio", "Std..Error", "t.value", "p.value", "btest...3.")]
colnames(ctable)<-c("Variable", "log(OddsRatio)", "OddsRatio", "Std.Error", "t.value", "p.value", "Brant p.value")
knitr::kable(ctable, caption=paste0("Model summary for ", yVar))
mod<-polr(totalArmLosses.ordinal ~  scale(cells)+ scale(xperchr)+scale(crossovers), data = analyze, Hess = T)
ci <- confint(mod)
## Store summary table
ctable <- coef(summary(mod))
## Calculate and store p values
p <- round(pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2, 8)
## combined table
ctable <- cbind(ctable, "p value" = p)
CIodds<-data.frame(exp(cbind(OR = coef(mod), ci)))
colnames(CIodds)<-c("Odds Ratio", "2.5%", "97.5%")
pacman::p_load("ggplot2")
# Finally, a summary of the model
CIodds$Variable<-rownames(CIodds)
ctable<-data.frame(ctable)
ctable$Variable<-rownames(ctable)
CIodds<-merge(CIodds, ctable)
CIodds$sig<-ifelse(CIodds$p.value < 0.05, T, F)
# Load the DescTools package for calculate the R square
pacman::p_load("DescTools")
# Calculate the R Square
PseudoR2(mod, which = c("CoxSnell","Nagelkerke","McFadden"))
pacman::p_load("brant", "Hmisc")
btest<-brant(mod)
pacman::p_load(ggpubr)
pvalsb<-data.frame(btest[,3])
mod
btest<-brant(mod)
brant(mod)
mod
makeSquareTest<-function(xvar, yvar, namex, namey){
# table(xvar, yvar)
perc<-as.data.frame(table(xvar, yvar))
perc$percent<-apply(perc, 1, function(x){
as.numeric(x["Freq"]) / sum( perc[perc$xvar == x["xvar"], "Freq"] )
})
perc$Label<-paste0("N = ", perc$Freq, " (",round(perc$percent*100, 2), "%)")
c<-chisq.test(xvar, yvar)
f<-fisher.test(xvar, yvar)
statMessage<- paste0(f$method, ", p-value = ", round(f$p.value, 4 ), "\n",c$method, ", p-value = ", round(c$p.value, 4 ))
ggplot(perc, aes(x = xvar, y = Freq, fill = yvar, label = Label ))+
geom_bar(position ="fill", stat="identity")+
geom_text( size = 3, position = position_fill(vjust=0.5))+
theme(  legend.position = "bottom")+
ylab("")+xlab("")+
labs(title = paste0(namex," vs. ", namey), subtitle= statMessage)
}
TestDataset[TestDataset$telocentric == "No-Telocentric" ,]
TestDataset.saved<-TestDataset
TestDataset<-TestDataset[TestDataset$telocentric == "No-Telocentric",]
TestDataset<-TestDataset.saved[TestDataset.sacev$telocentric == "No-Telocentric",]
# ARM GAINS vs all kinds of invsT
plotlist<-list()
for(invType in unique(TestDataset.long$InvSubset.sum)){
for(aberrationType in c("totalWholeAneuploidies", "totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains")){
plotlist[[paste0(invType,aberrationType)]]<- makeSquareTest(ifelse(TestDataset[,invType] == 0, "NoInvs", "Invs"),  # xvar
ifelse(TestDataset[,aberrationType] == 0, "NoAberration", "Aberration"),  # yvar
invType, aberrationType) # names
}
}
invType<-"cM.QN.sum.all"
aberrationType<-"totalWholeAneuploidies"
xvar<-ifelse(TestDataset[,invType] == 0, "NoInvs", "Invs")
yvar<- ifelse(TestDataset[,aberrationType] == 0, "NoGains", "Gains")
namex<-invType
namey<-aberrationType
# do.call("grid.arrange", c(plotlist))
ggarrange(plotlist=plotlist, common.legend = TRUE, legend = "bottom")
# do.call("grid.arrange", c(plotlist))
ggarrange(plotlist=plotlist, common.legend = TRUE, legend = "bottom")
TestDataset<-TestDataset.saved[TestDataset.sacev$telocentric == "No-Telocentric",]
# ARM GAINS vs all kinds of invsT
plotlist<-list()
for(invType in unique(TestDataset.long$InvSubset.sum)){
for(aberrationType in c("totalWholeAneuploidies", "totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains")){
plotlist[[paste0(invType,aberrationType)]]<- makeSquareTest(ifelse(TestDataset[,invType] == 0, "NoInvs", "Invs"),  # xvar
ifelse(TestDataset[,aberrationType] == 0, "NoAberration", "Aberration"),  # yvar
invType, aberrationType) # names
}
}
# do.call("grid.arrange", c(plotlist))
ggarrange(plotlist=plotlist, common.legend = TRUE, legend = "bottom")
makeSquareTest<-function(xvar, yvar, namex, namey){
# table(xvar, yvar)
perc<-as.data.frame(table(xvar, yvar))
perc$percent<-apply(perc, 1, function(x){
as.numeric(x["Freq"]) / sum( perc[perc$xvar == x["xvar"], "Freq"] )
})
perc$Label<-paste0("N = ", perc$Freq, " (",round(perc$percent*100, 2), "%)")
c<-chisq.test(xvar, yvar)
f<-fisher.test(xvar, yvar)
statMessage<- paste0(f$method, ", p-value = ", round(f$p.value, 4 ), "\n",c$method, ", p-value = ", round(c$p.value, 4 ))
ggplot(perc, aes(x = xvar, y = Freq, fill = yvar, label = Label ))+
geom_bar(position ="fill", stat="identity")+
geom_text( size = 3, position = position_fill(vjust=0.5))+
theme(  legend.position = "bottom", plot.subtitle = element_text(size = 10))+
ylab("")+xlab("")+
labs(title = paste0(namex," vs. ", namey), subtitle= statMessage)
}
TestDataset<-TestDataset.saved[TestDataset.sacev$telocentric == "No-Telocentric",]
# ARM GAINS vs all kinds of invsT
plotlist<-list()
for(invType in unique(TestDataset.long$InvSubset.sum)){
for(aberrationType in c("totalWholeAneuploidies", "totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains")){
plotlist[[paste0(invType,aberrationType)]]<- makeSquareTest(ifelse(TestDataset[,invType] == 0, "NoInvs", "Invs"),  # xvar
ifelse(TestDataset[,aberrationType] == 0, "NoAberration", "Aberration"),  # yvar
invType, aberrationType) # names
}
}
# do.call("grid.arrange", c(plotlist))
ggarrange(plotlist=plotlist, common.legend = TRUE, legend = "bottom")
makeSquareTest<-function(xvar, yvar, namex, namey){
# table(xvar, yvar)
perc<-as.data.frame(table(xvar, yvar))
perc$percent<-apply(perc, 1, function(x){
as.numeric(x["Freq"]) / sum( perc[perc$xvar == x["xvar"], "Freq"] )
})
perc$Label<-paste0("N = ", perc$Freq, " (",round(perc$percent*100, 2), "%)")
c<-chisq.test(xvar, yvar)
f<-fisher.test(xvar, yvar)
statMessage<- paste0(f$method, ", p-value = ", round(f$p.value, 4 ), "\n",c$method, ", p-value = ", round(c$p.value, 4 ))
ggplot(perc, aes(x = xvar, y = Freq, fill = yvar, label = Label ))+
geom_bar(position ="fill", stat="identity")+
geom_text( size = 3, position = position_fill(vjust=0.5))+
theme(  legend.position = "bottom", plot.subtitle = element_text(size = 5))+
ylab("")+xlab("")+
labs(title = paste0(namex," vs. ", namey), subtitle= statMessage)
}
TestDataset<-TestDataset.saved[TestDataset.sacev$telocentric == "No-Telocentric",]
# ARM GAINS vs all kinds of invsT
plotlist<-list()
for(invType in unique(TestDataset.long$InvSubset.sum)){
for(aberrationType in c("totalWholeAneuploidies", "totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains")){
plotlist[[paste0(invType,aberrationType)]]<- makeSquareTest(ifelse(TestDataset[,invType] == 0, "NoInvs", "Invs"),  # xvar
ifelse(TestDataset[,aberrationType] == 0, "NoAberration", "Aberration"),  # yvar
invType, aberrationType) # names
}
}
# do.call("grid.arrange", c(plotlist))
ggarrange(plotlist=plotlist, common.legend = TRUE, legend = "bottom")
makeSquareTest<-function(xvar, yvar, namex, namey){
# table(xvar, yvar)
perc<-as.data.frame(table(xvar, yvar))
perc$percent<-apply(perc, 1, function(x){
as.numeric(x["Freq"]) / sum( perc[perc$xvar == x["xvar"], "Freq"] )
})
perc$Label<-paste0("N = ", perc$Freq, " (",round(perc$percent*100, 2), "%)")
c<-chisq.test(xvar, yvar)
f<-fisher.test(xvar, yvar)
statMessage<- paste0(f$method, ", p-value = ", round(f$p.value, 4 ), "\n",c$method, ", p-value = ", round(c$p.value, 4 ))
ggplot(perc, aes(x = xvar, y = Freq, fill = yvar, label = Label ))+
geom_bar(position ="fill", stat="identity")+
geom_text( size = 3, position = position_fill(vjust=0.5))+
theme(  legend.position = "bottom", plot.subtitle = element_text(size = 7))+
ylab("")+xlab("")+
labs(title = paste0(namex," vs. ", namey), subtitle= statMessage)
}
TestDataset<-TestDataset.saved[TestDataset.sacev$telocentric == "No-Telocentric",]
# ARM GAINS vs all kinds of invsT
plotlist<-list()
for(invType in unique(TestDataset.long$InvSubset.sum)){
for(aberrationType in c("totalWholeAneuploidies", "totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains")){
plotlist[[paste0(invType,aberrationType)]]<- makeSquareTest(ifelse(TestDataset[,invType] == 0, "NoInvs", "Invs"),  # xvar
ifelse(TestDataset[,aberrationType] == 0, "NoAberration", "Aberration"),  # yvar
invType, aberrationType) # names
}
}
# do.call("grid.arrange", c(plotlist))
ggarrange(plotlist=plotlist, common.legend = TRUE, legend = "bottom")
TestDataset<-TestDataset.saved[TestDataset.sacev$telocentric == "No-Telocentric",]
# ARM GAINS vs all kinds of invsT
plotlist<-list()
for(invType in unique(TestDataset.long$InvSubset.count)){
for(aberrationType in c("totalWholeAneuploidies", "totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains")){
plotlist[[paste0(invType,aberrationType)]]<- makeSquareTest(ifelse(TestDataset[,invType] == 0, "NoInvs", "Invs"),  # xvar
ifelse(TestDataset[,aberrationType] == 0, "NoAberration", "Aberration"),  # yvar
invType, aberrationType) # names
}
}
# do.call("grid.arrange", c(plotlist))
ggarrange(plotlist=plotlist, common.legend = TRUE, legend = "bottom")
TestDataset<-TestDataset.saved[TestDataset.saver$telocentric == "No-Telocentric" ,]
TestDataset<-TestDataset.saved[TestDataset.saved$telocentric == "No-Telocentric" ,]
TestDataset<-TestDataset.saved[TestDataset.saved$telocentric == "No-Telocentric"& TestDataset.saved$chr != "chr9" ,]
# ARM GAINS vs all kinds of invsT
plotlist<-list()
for(invType in unique(TestDataset.long$InvSubset.count)){
for(aberrationType in c("totalWholeAneuploidies", "totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains")){
plotlist[[paste0(invType,aberrationType)]]<- makeSquareTest(ifelse(TestDataset[,invType] == 0, "NoInvs", "Invs"),  # xvar
ifelse(TestDataset[,aberrationType] == 0, "NoAberration", "Aberration"),  # yvar
invType, aberrationType) # names
}
}
# do.call("grid.arrange", c(plotlist))
ggarrange(plotlist=plotlist, common.legend = TRUE, legend = "bottom")
#
TestDataset<-TestDataset.saved[TestDataset.saved$telocentric == "Telocentric" ,]
# ARM GAINS vs all kinds of invsT
plotlist<-list()
for(invType in unique(TestDataset.long$InvSubset.count)){
for(aberrationType in c("totalWholeAneuploidies", "totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains")){
plotlist[[paste0(invType,aberrationType)]]<- makeSquareTest(ifelse(TestDataset[,invType] == 0, "NoInvs", "Invs"),  # xvar
ifelse(TestDataset[,aberrationType] == 0, "NoAberration", "Aberration"),  # yvar
invType, aberrationType) # names
}
}
# do.call("grid.arrange", c(plotlist))
ggarrange(plotlist=plotlist, common.legend = TRUE, legend = "bottom")
