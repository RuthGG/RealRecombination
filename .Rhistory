require("knitr")
opts_knit$set(root.dir = "~/20200401_RealRecombination/")
setwd("../../")
require("knitr")
opts_knit$set(root.dir = "~/20200401_RealRecombination/")
crossovers.original<-read.table("data/use/avery_crossovers/allcrossovers.bed")
save(crossovers.original, "../../data/use/avery_crossovers/allcrossovers.bed.Rdata")
save(crossovers.original, "data/use/avery_crossovers/allcrossovers.bed.Rdata")
save(crossovers.original,  file= "data/use/avery_crossovers/allcrossovers.bed.Rdata")
load("data/use/avery_crossovers/allcrossovers.bed.Rdata")
chr.length<-read.table("data/use/assembly_hg38/cromlength.gff")
View(chr.length)
View(crossovers.original)
colnames(crossovers.original)<-crossovers.original1,
chr.length<-read.table("data/use/assembly_hg38/cromlength.gff")
colnames(crossovers.original)<-crossovers.original[1,]
chr.length<-read.table("data/use/assembly_hg38/cromlength.gff")
crossovers.original[1,]<-NULL
crossovers.original[c(2:),]
crossovers.original[c(2:nrow(crossovers.original)),]
crossovers.original<-crossovers.original[c(2:nrow(crossovers.original)),]
load("data/use/avery_crossovers/allcrossovers.bed.Rdata")
colnames(crossovers.original)<-crossovers.original[1,]
crossovers.original<-crossovers.original[c(2:nrow(crossovers.original)),]
load("data/use/avery_crossovers/allcrossovers.bed.Rdata")
crossovers.original[1,]
colnames(crossovers.original)
colnames(crossovers.original)<-crossovers.original[1,]
colnames(crossovers.original)
load("data/use/avery_crossovers/allcrossovers.bed.Rdata")
crossovers.original[1,]
names<-c(crossovers.original[1,])
names
as.character(c(crossovers.original[1,]))
c(crossovers.original[1,]
)
as.character(crossovers.original[1,])
crossovers.original$V1<-as.character(crossovers.original$V1)
crossovers.original$V1<-as.character(crossovers.original$V1)
crossovers.original$V2<-as.numerical(as.character(crossovers.original$V2))
crossovers.original$V3<-as.numerical(as.character(crossovers.original$V3))
crossovers.original$V4<-as.character(crossovers.original$V4)
crossovers.original$V2<-as.numeric(as.character(crossovers.original$V2))
crossovers.original$V3<-as.numeric(as.character(crossovers.original$V3))
crossovers.original<-read.table("data/use/avery_crossovers/allcrossovers.bed", header = TRUE, stringsAsFactors = FALSE)
save(crossovers.original,  file= "data/use/avery_crossovers/allcrossovers.bed.Rdata")
load("data/use/avery_crossovers/allcrossovers.bed.Rdata")
chr.length<-read.table(".data/use/assembly_hg38/cromlength.gff")
chr.length<-read.table("data/use/assembly_hg38/cromlength.gff")
View(chr.length)
windows<-c()
start<-chr.length[chr.length$V1 == i, "V4"]
end<-chr.length[chr.length$V1 == i, "V5"]
q
for (i in unique(chr.length$V1)) {
start<-chr.length[chr.length$V1 == i, "V4"]
end<-chr.length[chr.length$V1 == i, "V5"]
}
c(start:end:500)
seq(start,end,500000)
crossovers.original$midpoint<-crossovers.original$pos.rightbound-crossovers.original$pos.leftbound
gsub("_.*", "" crossovers.original$donor_cell )
gsub("_.*", "" ,crossovers.original$donor_cell )
crossovers.original$donor_cell <- gsub("_.*", "" ,crossovers.original$donor_cell )
crossovers.original$donor_cell
unique(crossovers.original$donor_cell )
expand.grid(unique(crossovers.original$donor_cell ), chr.length$V1)
map<-data.frame(expand.grid(unique(crossovers.original$donor_cell ), chr.length$V1))
View(map)
map<-data.frame(expand.grid(unique(crossovers.original$donor_cell ), nest(chr.length$V1, chr.length$V3, chr.length$V4))
)
require("tidyr")
nest(chr.length$V1, chr.length$V3, chr.length$V4))
nest(chr.length$V1, chr.length$V3, chr.length$V4)
expand.grid(unique(crossovers.original$donor_cell ), nest(chr.length$V1, chr.length$V3, chr.length$V4))
map<-data.frame(expand.grid(unique(crossovers.original$donor_cell ), chr.length$V1))
merge(map, chr.length[,c("V1", "V4", "V5"),])
map<-merge(map, chr.length[,c("V1", "V4", "V5"),])
View(map)
map<-merge(map, chr.length[,c("V1", "V4", "V5"),], by.x=Var2, by.y=V1)
map<-merge(map, chr.length[,c("V1", "V4", "V5"),], by.x="Var2", by.y="V1")
map<-data.frame(expand.grid(unique(crossovers.original$donor_cell ), chr.length$V1))
map<-merge(map, chr.length[,c("V1", "V4", "V5"),], by.x="Var2", by.y="V1")
apply(map, 1, FUN=function(x){
windows<-seq(map$V4, map$V5, 500000)
})
apply(map, 1, FUN=function(x){
windows<-seq(x["V4"], x["V5"], 500000)
})
windows<-seq(x["V4"], x["V5"], 500000)
x<-map[1,]
windows<-seq(x["V4"], x["V5"], 500000)
x["V4"]
x["V5"]
seq(x["V4"], x["V5"], 500000)
windows<-seq(10000, 248946422, 500000)
table<-data.frame(window=windows)
table
merge(table, x)
merge(windows, x)
apply(map, 1, FUN=function(x){
windows<-seq(x["V4"], x["V5"], 500000)
table<-merge(windows, x)
})
apply(map, 1, FUN=function(x){
windows<-seq(x["V4"], x["V5"], 500000)
table<-merge(windows, x)
table
})
apply(map, 1, FUN=function(x){
windows<-seq(x["V4"], x["V5"], 500000)
table<-data.frame(window=windows)
table<-merge(table, x)
table
})
test<-unlist(apply(map, 1, FUN=function(x){
windows<-seq(x["V4"], x["V5"], 500000)
table<-merge(windows, x)
}))
test<-data.frame(unlist(apply(map, 1, FUN=function(x){
windows<-seq(x["V4"], x["V5"], 500000)
table<-merge(windows, x)
})))
View(test)
test<-data.frame(unlist(apply(map, 1, FUN=function(x){
windows<-seq(x["V4"], x["V5"], 500000)
table<-merge(windows, x)
table
})))
test<-data.frame(unlist(apply(map, 1, FUN=function(x){
windows<-seq(x["V4"], x["V5"], 500000)
table<-data.frame(merge(windows, x))
table
})))
apply(map, 1, FUN=function(x){
windows<-seq(x["V4"], x["V5"], 500000)
table<-data.frame(merge(windows, x))
table
})
apply(map, 1, FUN=function(x){
x
# windows<-seq(x["V4"], x["V5"], 500000)
# table<-data.frame(merge(windows, x))
# table
})
apply(map, 1, FUN=function(x){
windows<-seq(x["V4"], x["V5"], 500000)
content<-data.frame(x)
table<-data.frame(merge(windows, content))
table
})
as.data.frame(unlist(apply(map, 1, FUN=function(x){
data.frame(c(x["V4"], x["V5"]))
# windows<-seq(x["V4"], x["V5"], 500000)
# content<-data.frame(x)
# table<-data.frame(merge(windows, content))
# table
})))
View(map)
View(map)
sets<-data.frame()
for (i in rownames(map)){
start<-map[i, "V4"]
end<-map[i, "V5"]
windows<-seq(start, end, 500000)
table<-merge(windows, map[i,])
sets<-rbind(sets,table)
}
View(sets)
sets$value<-apply(sets, 1, function(x){
nrow(crossovers.original[crossovers.original$chr == x["Var2"] & crossovers.original$donor_cell == x["Var1"]&
crossovers.original$midpoint < x["x"], ])
})
View(sets)
apply(sets, 1, function(x){
x["Var2"]
# nrow(crossovers.original[crossovers.original$chr == x["Var2"] & crossovers.original$donor_cell == x["Var1"]&
#                       crossovers.original$midpoint < x["x"], ])
})
apply(sets, 1, function(x){
crossovers.original[crossovers.original$chr == x["Var2"],]
# nrow(crossovers.original[crossovers.original$chr == x["Var2"] & crossovers.original$donor_cell == x["Var1"]&
#                       crossovers.original$midpoint < x["x"], ])
})
apply(sets, 1, function(x){
nrow(crossovers.original[crossovers.original$chr == x["Var2"],])
# nrow(crossovers.original[crossovers.original$chr == x["Var2"] & crossovers.original$donor_cell == x["Var1"]&
#                       crossovers.original$midpoint < x["x"], ])
})
apply(sets, 1, function(x){
nrow(crossovers.original[crossovers.original$chr == x["Var2"] & crossovers.original$donor_cell == x["Var1"] ,])
# nrow(crossovers.original[crossovers.original$chr == x["Var2"] &
#                       crossovers.original$midpoint < x["x"], ])
})
sets$value<-apply(sets, 1, function(x){
nrow(crossovers.original[crossovers.original$chr == x["Var2"] & crossovers.original$donor_cell == x["Var1"] ,])
# nrow(crossovers.original[crossovers.original$chr == x["Var2"] &
#                       crossovers.original$midpoint < x["x"], ])
})
0.01*100
1000000/10000
*100
100*100
1000000/500000*100
500000/1000000
1000000/500000 * 100
500000/1000000
pwd
getwd()
require("knitr")
require("tidyr")
require("ggforce")
require("stringr")
opts_knit$set(root.dir = "/run/user/1001/gvfs/sftp:host=158.109.38.201,user=rgomez/home/rgomez/20200401_RealRecombination")
