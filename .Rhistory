# Fold changes log
test.subset.wide$Means.Fold.Changelog<- log2(test.subset.wide$Means.Fold.Change)
# Discard those without data
test.subset.wide<-  test.subset.wide[!is.na(test.subset.wide$Means.Difference),]
}else{
# Use info as-is
test.subset.wide<-toPlot
}
# Order table and factors
# Relative positions and window IDs
test.subset.wide[c("side", "relpos")]<-str_split_fixed(test.subset.wide$idWin, "_", 3)[,c(2,3)]
test.subset.wide[c("winPos")]<-str_split_fixed(test.subset.wide$idWin, "_", 2)[,2]
test.subset.wide$side<-factor(test.subset.wide$side, levels = c("left", "inv", "right"))
test.subset.wide$relpos<-as.numeric(test.subset.wide$relpos)
test.subset.wide<-test.subset.wide[order( test.subset.wide$side, test.subset.wide$relpos),]
test.subset.wide$winPos<- factor(  test.subset.wide$winPos, levels = unique(  test.subset.wide$winPos))
# Add relevant inversion info
test.subset.wide<-merge(test.subset.wide, invinfo, all.x = TRUE)
return(test.subset.wide)
}
# testFF<-tidyData(aggregateWins = F, aggregateInvs = F)
# testFT<-tidyData(aggregateWins = FALSE, aggregateInvs = T) # >1 window per inversion, 1 row per inversion window
# testTF<-tidyData(aggregateWins =T, aggregateInvs = FALSE) # 1 window per inversion, 1 row per inversion-window-individual
testTT<-tidyData(aggregateWins = T, aggregateInvs = T) # 1 window per inversion,1 row per inversion window
expected <- data.frame(size =invinfo$Size ,logsize = log(invinfo$Size), source = "expected")
genotyped<-data.frame(size=unique(testTT[,c("Size", "Inversion")])$Size, logsize=(log(unique(testTT[,c("Size", "Inversion")])$Size)), source = "genotyped")
sizeComp<-rbind(expected, genotyped)
# MEDIAN TEST
sizeComp.median<-data.frame(median = c(median(expected$size), median(genotyped$size)), logmedian = c(log(median(expected$size)),log(median(genotyped$size))), source = c("expected", "genotyped") )
# 75% TEST
sizeComp.quant4<-data.frame(median = c( quantile(expected$size, 0.75), quantile(genotyped$size, 0.75) ),
logmedian = c(log(quantile(expected$size, 0.75)), log(quantile(genotyped$size,0.75)) ), source = c("expected", "genotyped") )
ggplot(sizeComp, aes(x = logsize))+geom_histogram(bins = 10)+facet_wrap(.~source , scales = "free")+
geom_text(data=sizeComp.median, aes(x = Inf, y = +Inf, label = paste0("median= ", median) ) , vjust = 1.1, hjust = 1.1, color = "red")+
geom_vline(data = sizeComp.median, aes(xintercept = logmedian), color = "red")+
geom_text(data=sizeComp.quant4, aes(x = Inf, y = +Inf, label = paste0("3rd quartile= ", median) ) , vjust = 3.1, hjust = 1.1, color = "blue")+
geom_vline(data = sizeComp.quant4, aes(xintercept = logmedian), color = "blue")
sub<-unique(testTT[,c("Group.0.5", "Group.0.75", "Size")])
# MEDIAN THRESHOLD
counts<-data.frame(table(sub$Group.0.5))
colnames(counts)<-c("Group", "n.Invs")
counts$minsize<-aggregate(Size ~ Group.0.5, data= sub, min)$Size
counts$maxsize<-aggregate(Size ~ Group.0.5, data= sub, max)$Size
counts.0.5<-counts
#  0.75 THRESHOLD
counts<-data.frame(table(sub$Group.0.75))
colnames(counts)<-c("Group", "n.Invs")
counts$minsize<-aggregate(Size ~ Group.0.75, data= sub, min)$Size
counts$maxsize<-aggregate(Size ~ Group.0.75, data= sub, max)$Size
counts.0.75<-counts
# Show
kbl(
list(counts.0.5, counts.0.75), booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")    %>%
kable_styling(position = "center")
sub<-unique(testTT[,c("Group.0.5", "Group.0.75", "Size")])
counts<-data.frame(table(sub$Group.0.5))
colnames(counts)<-c("Group", "n.Invs")
counts$minsize<-aggregate(Size ~ Group.0.5, data= sub, min)$Size
counts$maxsize<-aggregate(Size ~ Group.0.5, data= sub, max)$Size
counts.0.5<-counts
counts<-data.frame(table(sub$Group.0.75))
colnames(counts)<-c("Group", "n.Invs")
counts$minsize<-aggregate(Size ~ Group.0.75, data= sub, min)$Size
counts$maxsize<-aggregate(Size ~ Group.0.75, data= sub, max)$Size
counts.0.75<-counts
counts.0.75
list(data.framE(counts.0.5), data,frame(counts.0.75)), booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")    %>%
kable_styling(position = "center")
list(data.framE(counts.0.5), data,frame(counts.0.75))
list(data.frame(counts.0.5), data,frame(counts.0.75))
sub<-unique(testTT[,c("Group.0.5", "Group.0.75", "Size")])
# MEDIAN THRESHOLD
counts<-data.frame(table(sub$Group.0.5))
colnames(counts)<-c("Group", "n.Invs")
counts$minsize<-aggregate(Size ~ Group.0.5, data= sub, min)$Size
counts$maxsize<-aggregate(Size ~ Group.0.5, data= sub, max)$Size
counts.0.5<-counts
#  0.75 THRESHOLD
counts<-data.frame(table(sub$Group.0.75))
colnames(counts)<-c("Group", "n.Invs")
counts$minsize<-aggregate(Size ~ Group.0.75, data= sub, min)$Size
counts$maxsize<-aggregate(Size ~ Group.0.75, data= sub, max)$Size
counts.0.75<-counts
list(data.frame(counts.0.5), data,frame(counts.0.75))
list(data.frame(counts.0.5), data.frame(counts.0.75))
# Show
kbl(
list(data.frame(counts.0.5), data.frame(counts.0.75)), booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")    %>%
kable_styling(position = "center")
counts.0.75
cbind(counts0.5, counts0.75), booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")    %>%
kable_styling(position = "center")%>%
add_header_above(c("Median" = 4, "3rd Quantile" = 4))
cbind(counts0.5, counts0.75)
counts<-data.frame(table(sub$Group.0.5))
colnames(counts)<-c("Group", "n.Invs")
counts$minsize<-aggregate(Size ~ Group.0.5, data= sub, min)$Size
counts$maxsize<-aggregate(Size ~ Group.0.5, data= sub, max)$Size
counts.0.5<-counts
#  0.75 THRESHOLD
counts<-data.frame(table(sub$Group.0.75))
colnames(counts)<-c("Group", "n.Invs")
counts$minsize<-aggregate(Size ~ Group.0.75, data= sub, min)$Size
counts$maxsize<-aggregate(Size ~ Group.0.75, data= sub, max)$Size
counts.0.75<-counts
cbind(counts.0.5, counts.0.75), booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")    %>%
kable_styling(position = "center")%>%
add_header_above(c("Median" = 4, "3rd Quantile" = 4))
cbind(counts.0.5, counts.0.75)
kbl(
cbind(counts.0.5, counts.0.75), booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")
cbind(counts.0.5, counts.0.75), booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")    %>%
kable_styling(position = "center")%>%
add_header_above(c("Median" = 4, "3rd Quantile" = 4))
counts<-merge(counts0.5, counts0.75)
counts<-merge(counts.0.5, counts.0.75)
counts
counts<-data.frame(table(sub$Group.0.5))
colnames(counts)<-c("Group", "n.Invs")
counts
counts$minsize<-aggregate(Size ~ Group.0.5, data= sub, min)$Size
counts$maxsize<-aggregate(Size ~ Group.0.5, data= sub, max)$Size
counts
counts.0.5<-counts
counts<-data.frame(table(sub$Group.0.75))
colnames(counts)<-c("Group", "n.Invs")
counts$minsize<-aggregate(Size ~ Group.0.75, data= sub, min)$Size
counts$maxsize<-aggregate(Size ~ Group.0.75, data= sub, max)$Size
counts.0.75<-counts
counts<-merge(counts.0.5, counts.0.75, by = "Group", suffixes = c("", ""))
counts
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")    %>%
kable_styling(position = "center")%>%
add_header_above(c("Median" = 4, "3rd Quantile" = 4))
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")    %>%
# kable_styling(position = "center")%>%
add_header_above(c("Median" = 4, "3rd Quantile" = 4))
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")    %>%
# kable_styling(position = "center")%>%
add_header_above(c("Median" = 4, "3rd Quantile" = 4))
counts %>%
# now the nice header
kable("latex", booktabs = T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h") %>%
kable_styling(position = "center") %>%
add_header_above(c("Median" = 4, "3rd Quantile" = 4))
# Show
kbl(
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")  #   %>%
counts
# Show
kbl(
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")  #   %>%
# Show
kbl(
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")  #   %>%
require("ggpubr")
require("reshape2")
library("ggplot2")
require("data.table")
require("knitr")
require("stringr")
library("kableExtra")
# Show
kbl(
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")  #   %>%
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")     %>%
kable_styling(position = "center")%>%
add_header_above(c("Median" = 4, "3rd Quantile" = 4))
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")     %>%
# kable_styling(position = "center")%>%
add_header_above(c("Median" = 4, "3rd Quantile" = 4))
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")     %>%
# kable_styling(position = "center")%>%
# add_header_above(c("Median" = 4, "3rd Quantile" = 4))
```
# Show
kbl(
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")    # %>%
# kable_styling(position = "center")%>%
add_header_above(c("" = 1, Median" = 3, "3rd Quantile" = 3))
# kable_styling(position = "center")%>%
add_header_above(c("" = 1, "Median" = 3, "3rd Quantile" = 3))
# Show
kbl(
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")    # %>%
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")     %>%
# kable_styling(position = "center")%>%
add_header_above(c(" " = 1, "Median" = 3, "3rd Quantile" = 3))
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")     %>%
# kable_styling(position = "center")%>%
add_header_above(x, c(" " = 1, "Median" = 3, "3rd Quantile" = 3))
# Show
x<- kbl(
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")   #  %>%
# kable_styling(position = "center")%>%
add_header_above(x, c(" " = 1, "Median" = 3, "3rd Quantile" = 3))
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")     %>%
# kable_styling(position = "center")%>%
add_header_above(x, c(" " = 1, "Median" = 3, "3rd Quantile" = 3))
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")     %>%
kable_styling(position = "center")%>%
add_header_above(x, c(" " = 1, "Median" = 3, "3rd Quantile" = 3))
# without outlayer
testTT<-testTT[testTT$Inversion != "HsInv0325", ]
# Lineplot
ggplot(testTT[testTT$relpos <2,])+geom_line(aes(x = winPos, y = Means.Fold.Changelog, group = Inversion), color = "steelblue4")+
facet_grid(Group ~ . ) +
geom_text(data = testTT[testTT$winPos == "inv_1", ] , aes(x = winPos, y = Means.Fold.Changelog, label = Inversion) )+
geom_hline(yintercept = 0, color = "red", alpha = 0.75)
# Correlation
testTT$logSize<-log(testTT$Size)
ggpubr::ggscatter(testTT[testTT$winPos == "inv_1" , ], x = "logSize", y = "Means.Fold.Changelog",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray")
)+
stat_cor(method = "pearson", label.x.npc = 0, label.y.npc = 1 )
# Boxplot
ggplot(testTT[testTT$winPos == "inv_1",], aes(y = Means.Fold.Changelog, x = Group))+geom_boxplot(outlier.size =  -Inf )+geom_jitter( width = 0.1)
# Lineplot
ggplot(testTT[testTT$relpos <2,])+geom_line(aes(x = winPos, y = Means.Fold.Changelog, group = Inversion), color = "steelblue4")+
facet_grid(Group.0.5 ~ . ) +
geom_text(data = testTT[testTT$winPos == "inv_1", ] , aes(x = winPos, y = Means.Fold.Changelog, label = Inversion) )+
geom_hline(yintercept = 0, color = "red", alpha = 0.75)
ggplot(testTT[testTT$relpos <2,])+geom_line(aes(x = winPos, y = Means.Fold.Changelog, group = Inversion), color = "steelblue4")+
facet_grid(Group.0.75 ~ . ) +
geom_text(data = testTT[testTT$winPos == "inv_1", ] , aes(x = winPos, y = Means.Fold.Changelog, label = Inversion) )+
geom_hline(yintercept = 0, color = "red", alpha = 0.75)
lineplot0.5<-ggplot(testTT[testTT$relpos <2,])+geom_line(aes(x = winPos, y = Means.Fold.Changelog, group = Inversion), color = "steelblue4")+
facet_grid(Group.0.5 ~ . ) +
geom_text(data = testTT[testTT$winPos == "inv_1", ] , aes(x = winPos, y = Means.Fold.Changelog, label = Inversion) )+
geom_hline(yintercept = 0, color = "red", alpha = 0.75)
lineplot0.7<-ggplot(testTT[testTT$relpos <2,])+geom_line(aes(x = winPos, y = Means.Fold.Changelog, group = Inversion), color = "steelblue4")+
facet_grid(Group.0.75 ~ . ) +
geom_text(data = testTT[testTT$winPos == "inv_1", ] , aes(x = winPos, y = Means.Fold.Changelog, label = Inversion) )+
geom_hline(yintercept = 0, color = "red", alpha = 0.75)
gridExtra::arrangeGrob(lineplot0.5, lineplot0.7)
grid.arrange(lineplot0.5, lineplot0.7)
require("gridExtra")
grid.arrange(lineplot0.5, lineplot0.7)
grid.arrange(lineplot0.5, lineplot0.7, nrow = 1)
lineplot0.5<-ggplot(testTT[testTT$relpos <2,])+geom_line(aes(x = winPos, y = Means.Fold.Changelog, group = Inversion), color = "steelblue4")+
facet_grid(Group.0.5 ~ . ) +
geom_text(data = testTT[testTT$winPos == "inv_1", ] , aes(x = winPos, y = Means.Fold.Changelog, label = Inversion) )+
geom_hline(yintercept = 0, color = "red", alpha = 0.75)+
geom_tile("Median threshold")
lineplot0.7<-ggplot(testTT[testTT$relpos <2,])+geom_line(aes(x = winPos, y = Means.Fold.Changelog, group = Inversion), color = "steelblue4")+
facet_grid(Group.0.75 ~ . ) +
geom_text(data = testTT[testTT$winPos == "inv_1", ] , aes(x = winPos, y = Means.Fold.Changelog, label = Inversion) )+
geom_hline(yintercept = 0, color = "red", alpha = 0.75)+
geom_tile("3r Quartile threshold")
grid.arrange(lineplot0.5, lineplot0.7, nrow = 1)
lineplot0.7<-ggplot(testTT[testTT$relpos <2,])+geom_line(aes(x = winPos, y = Means.Fold.Changelog, group = Inversion), color = "steelblue4")+
facet_grid(Group.0.75 ~ . ) +
geom_text(data = testTT[testTT$winPos == "inv_1", ] , aes(x = winPos, y = Means.Fold.Changelog, label = Inversion) )+
geom_hline(yintercept = 0, color = "red", alpha = 0.75)+
ggtitle("3r Quartile threshold")
grid.arrange(lineplot0.5, lineplot0.7, nrow = 1)
lineplot0.5<-ggplot(testTT[testTT$relpos <2,])+geom_line(aes(x = winPos, y = Means.Fold.Changelog, group = Inversion), color = "steelblue4")+
facet_grid(Group.0.5 ~ . ) +
geom_text(data = testTT[testTT$winPos == "inv_1", ] , aes(x = winPos, y = Means.Fold.Changelog, label = Inversion) )+
geom_hline(yintercept = 0, color = "red", alpha = 0.75)+
ggtitle("Median threshold")
lineplot0.7<-ggplot(testTT[testTT$relpos <2,])+geom_line(aes(x = winPos, y = Means.Fold.Changelog, group = Inversion), color = "steelblue4")+
facet_grid(Group.0.75 ~ . ) +
geom_text(data = testTT[testTT$winPos == "inv_1", ] , aes(x = winPos, y = Means.Fold.Changelog, label = Inversion) )+
geom_hline(yintercept = 0, color = "red", alpha = 0.75)+
ggtitle("3r Quartile threshold")
grid.arrange(lineplot0.5, lineplot0.7, nrow = 1)
ggpubr::ggscatter(testTT[testTT$winPos == "inv_1" , ], x = "logSize", y = "Means.Fold.Changelog",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray")
)+
stat_cor(method = "pearson", label.x.npc = 0, label.y.npc = 1 )
ggpubr::ggscatter(testTT[testTT$winPos == "inv_1" , ], x = "logSize", y = "Means.Fold.Changelog",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
title = "Median threshold"
)+
stat_cor(method = "pearson", label.x.npc = 0, label.y.npc = 1 )
ggplot(testTT[testTT$winPos == "inv_1",], aes(y = Means.Fold.Changelog, x = Group))+geom_boxplot(outlier.size =  -Inf )+geom_jitter( width = 0.1)
ggplot(testTT[testTT$winPos == "inv_1",], aes(y = Means.Fold.Changelog, x = Group.0.5))+geom_boxplot(outlier.size =  -Inf )+geom_jitter( width = 0.1)
ggplot(testTT[testTT$winPos == "inv_1",], aes(y = Means.Fold.Changelog, x = Group.0.5))+
geom_boxplot(outlier.size =  -Inf )+
geom_jitter( width = 0.1)+
ggtitle("Median size threshold")
boxplot0.7<- ggplot(testTT[testTT$winPos == "inv_1",], aes(y = Means.Fold.Changelog, x = Group.0.75))+
geom_boxplot(outlier.size =  -Inf )+
geom_jitter( width = 0.1)+
ggtitle("Median size threshold")
boxplot0.5<- ggplot(testTT[testTT$winPos == "inv_1",], aes(y = Means.Fold.Changelog, x = Group.0.5))+
geom_boxplot(outlier.size =  -Inf )+
geom_jitter( width = 0.1)+
ggtitle("Median size threshold")
boxplot0.7<- ggplot(testTT[testTT$winPos == "inv_1",], aes(y = Means.Fold.Changelog, x = Group.0.75))+
geom_boxplot(outlier.size =  -Inf )+
geom_jitter( width = 0.1)+
ggtitle("Median size threshold")
grid.arrange(boxplot0.5, boxplot0.7, nrow = 1)
ggplot(testTable)+geom_bar(aes(x = Group, fill = difgroup), position = "dodge")
testTable<-testTT[testTT$side == "inv",]
testTable$difgroup<-testTable$Means.Fold.Changelog>0
ggplot(testTable)+geom_bar(aes(x = Group.0.5, fill = difgroup), position = "dodge")
7/1
1/7
log2(7/1)
log2(1/7)
testTable<-testTT[testTT$side == "inv",]
testTable$difgroup<-ifelse(testTable$Means.Fold.Changelog>0, "HET > HOM", "HET < HOM" )
barplots0.5<-ggplot(testTable)+geom_bar(aes(x = Group.0.5, fill = difgroup), position = "dodge")+
ggtitle("Positive")
barplots0.5
barplots0.5<-ggplot(testTable)+geom_bar(aes(x = Group.0.5, fill = difgroup), position = "dodge")+
ggtitle("Median size threshold")
barplots0.7<-ggplot(testTable)+geom_bar(aes(x = Group.0.75, fill = difgroup), position = "dodge")+
ggtitle("3rd Quartile size threshold")
grid.arrange(barplots0.5, barplots0.7)
grid.arrange(barplots0.5, barplots0.7, nrow = 1)
ggarrange(barplots0.5, barplots0.7, nrow = 1)
ggarrange(barplots0.5, barplots0.7, nrow = 1, legend = "right")
ggarrange(barplots0.5, barplots0.7, nrow = 1, legend = "right",common.legend = TRUE)
ggarrange(barplots0.5, barplots0.7, nrow = 1, legend = "bottom",common.legend = TRUE)
Input =paste0("
Result  Big  Small
Positive  ",nrow(testTable[testTable$Group != "Small" & testTable$difgroup == "TRUE" ,]),"  ",nrow(testTable[testTable$Group == "Small" & testTable$difgroup == "TRUE" ,]),"
Negative  ",nrow(testTable[testTable$Group != "Small" & testTable$difgroup == "FALSE" ,]),"  ",nrow(testTable[testTable$Group == "Small" & testTable$difgroup == "FALSE" ,]),"
")
Matriz = as.matrix(read.table(textConnection(Input),
header=TRUE,
row.names=1))
Matriz
Input =paste0("
Result  Big  Small
Positive  ",nrow(testTable[testTable$Group0.5 != "Small" & testTable$difgroup == "TRUE" ,]),"  ",nrow(testTable[testTable$Group0.5 == "Small" & testTable$difgroup == "TRUE" ,]),"
Negative  ",nrow(testTable[testTable$Group0.5 != "Small" & testTable$difgroup == "FALSE" ,]),"  ",nrow(testTable[testTable$Group0.5 == "Small" & testTable$difgroup == "FALSE" ,]),"
")
Matriz = as.matrix(read.table(textConnection(Input),
header=TRUE,
row.names=1))
Matriz
Input =paste0("
Result  Big  Small
Positive  ",nrow(testTable[testTable$Group0.5 != "Small" & testTable$difgroup == "HET > HOM" ,]),"  ",nrow(testTable[testTable$Group0.5 == "Small" & testTable$difgroup == "HET > HOM" ,]),"
Negative  ",nrow(testTable[testTable$Group0.5 != "Small" & testTable$difgroup == "HET < HOM" ,]),"  ",nrow(testTable[testTable$Group0.5 == "Small" & testTable$difgroup == "HET < HOM" ,]),"
")
Matriz = as.matrix(read.table(textConnection(Input),
header=TRUE,
row.names=1))
Matriz
nrow(testTable[testTable$Group0.5 != "Small" & testTable$difgroup == "HET > HOM" ,])
testTable<-testTT[testTT$side == "inv",]
testTable$difgroup<-ifelse(testTable$Means.Fold.Changelog>0, "HET > HOM", "HET < HOM" )
barplots0.5<-ggplot(testTable)+geom_bar(aes(x = Group.0.5, fill = difgroup), position = "dodge")+
ggtitle("Median size threshold")
barplots0.7<-ggplot(testTable)+geom_bar(aes(x = Group.0.75, fill = difgroup), position = "dodge")+
ggtitle("3rd Quartile size threshold")
ggarrange(barplots0.5, barplots0.7, nrow = 1, legend = "bottom",common.legend = TRUE)
testTable[testTable$Group0.5 != "Small" & testTable$difgroup == "HET > HOM" ,]
testTable[testTable$Group.0.5 = "Big",]
testTable[testTable$Group.0.5 == "Big",]
testTable[testTable$Group.0.5 == "Big" & difgroup == "HET < HOM",]
testTable[testTable$Group.0.5 == "Big" & testTable$difgroup == "HET < HOM",]
table(testTable$Group.0.5, testTable$difgroup)
table( testTable$difgroup, testTable$Group.0.5)
as.matrix(table( testTable$difgroup, testTable$Group.0.5))
Matriz = as.matrix(table( testTable$difgroup, testTable$Group.0.5))
chisq.test(Matriz,
correct=TRUE)
Matriz
Matriz = as.matrix(table( testTable$difgroup, testTable$Group.0.75))
Matriz
chisq.test(Matriz,
correct=TRUE)
print("Chi squared test using Median threshold")
Matriz = as.matrix(table( testTable$difgroup, testTable$Group.0.5))
Matriz
chisq.test(Matriz,
correct=TRUE)
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")     %>%
kable_styling(position = "center")%>%
add_header_above( c(" " = 1, "Median" = 3, "3rd Quantile" = 3))
counts, booktabs=T, row.names = FALSE, caption = "Basic information for the two group sizes in which inversions were divided", position = "h")     %>%
# kable_styling(position = "center")%>%
add_header_above( c(" " = 1, "Median" = 3, "3rd Quantile" = 3))
print("Chi squared test using Median threshold")
Matriz = as.matrix(table( testTable$difgroup, testTable$Group.0.5))
Matriz
chisq.test(Matriz,
correct=TRUE)
print("------------------------------------------------")
print("Chi squared test using 3rd Quartile threshold")
Matriz = as.matrix(table( testTable$difgroup, testTable$Group.0.75))
Matriz
chisq.test(Matriz,
correct=TRUE)
# LOAD ARGUMENTS
# =========================================================================== #
args = commandArgs(trailingOnly=TRUE)
args[1]<-"analysis/2021-02-16_06_imputation_merged" # Directory with imputation results in .vcf
args[2]<-"data/use/avery_individuals/samples_population.txt"  # Test individuals population
args[3]<-"data/use/inversions_info/Inversions_imputability.txt" # Inversions imputability
args[4]<-"tmp/test" # output directory
# First specify the packages of interest
packages = c("stringr", "reshape2", "naniar")
# Now load or install&load all
lapply(packages,FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
# LOAD ARGUMENTS
# =========================================================================== #
args = commandArgs(trailingOnly=TRUE)
args[1]<-"analysis/2021-02-16_06_imputation_merged" # Directory with imputation results in .vcf
args[2]<-"data/use/avery_individuals/samples_population.txt"  # Test individuals population
args[3]<-"data/use/inversions_info/Inversions_imputability.txt" # Inversions imputability
args[4]<-"tmp/test" # output directory
# First specify the packages of interest
packages = c("stringr", "reshape2", "naniar")
lapply(packages,FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
# Set it as a function to limit stored intermediate objects
# directory<-args[1]
parsedir<-function(directory){
# Previous parameters
files<-list.files(directory, pattern = "*.vcf", full.names=TRUE)
filelist<-list()
control_list<-c()
test_list<-c()
# Parsing loop
for (filename in files) {
trim_filename<-sub( ".*\\/", "", filename)
trim_filename<-sub( "_readSum.vcf", "", trim_filename)
table<-read.table( filename, sep = "\t", stringsAsFactors = FALSE, comment.char = "" , skip = 2, header = TRUE, check.names = FALSE )
vcf<-table[,c(3,10:length(table))]
vcf_melted<-reshape2::melt(vcf, id.vars = "ID")
vcf_melted$Inversion<-str_split_fixed(vcf_melted$ID, ";", 2)[,1]
vcf_melted<-cbind(vcf_melted[,c("Inversion", "variable")], str_split_fixed(vcf_melted$value, ":", 2), stringsAsFactors=FALSE)
# vcf_merged<-merge(vcf_melted, populations , by.x = "variable", by.y = "sample", all.x = TRUE)
if (grepl("ALL", trim_filename)) {
defname<-str_split_fixed(trim_filename, "_", 2)[2]
test_list<-c(test_list, trim_filename)
}else{
defname<-"con"
control_list<-c(control_list, trim_filename)
}
colnames(vcf_melted)<-c("Inversion", "Individual", paste( "Genotype", defname, sep="_"), paste( "Probability", defname, sep="_"))
filelist[[trim_filename]]<-vcf_melted
}
# Merge controls
filelist[["control"]]<-do.call("rbind", filelist[control_list])
# Merge all
all_3c<-Reduce(function(x, y) merge(x, y, by=c("Inversion", "Individual"), all = TRUE), filelist[c(test_list, "control")] )
# Replace "" by NA
indivs_vector<-all_3c$Individual
all_3c<- all_3c %>% replace_with_na_all(condition = ~.x == "")
all_3c<-as.data.frame(all_3c)
all_3c$Individual<-indivs_vector
# Return table
return(all_3c)
}
# Apply function
all_3c<-parsedir(args[1])
# Set it as a function to limit stored intermediate objects
directory<-args[1]
# Previous parameters
files<-list.files(directory, pattern = "*.vcf", full.names=TRUE)
files
directory
setwd("/run/user/1001/gvfs/sftp:host=158.109.38.201,user=rgomez/home/rgomez/20200401_RealRecombination/code/rscript")
# Previous parameters
files<-list.files(directory, pattern = "*.vcf", full.names=TRUE)
files
directory
setwd("~/Documents/PHD_Repos/20200401_RealRecombination")
# Previous parameters
files<-list.files(directory, pattern = "*.vcf", full.names=TRUE)
files
directory
list.files(directory, pattern = "*.vcf", full.names=TRUE)
# LOAD ARGUMENTS
# =========================================================================== #
args = commandArgs(trailingOnly=TRUE)
args[1]<-"analysis/2021-02-16_06_imputation_merged" # Directory with imputation results in .vcf
args[2]<-"data/use/avery_individuals/samples_population.txt"  # Test individuals population
args[3]<-"data/use/inversions_info/Inversions_imputability.txt" # Inversions imputability
args[4]<-"tmp/test" # output directory
# First specify the packages of interest
packages = c("stringr", "reshape2", "naniar")
lapply(packages,FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
# Set it as a function to limit stored intermediate objects
directory<-args[1]
# Previous parameters
files<-list.files(directory, pattern = "*.vcf", full.names=TRUE)
files
directory
list.files(directory)
