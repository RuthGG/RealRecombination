ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha=0.5, size=1.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha=0.5, size=3)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha=0.5, size=2)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))
library(viridis)
library(viridisLite)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha=0.5, size=2)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))+scale_color_viridis()
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha=0.5, size=2)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))+scale_color_viridis_a()
packages = c("ggplot2", "ggrepel", "ggpubr", "cowplot", "rlang", "viridis")
# Now load or install&load all
lapply(packages,FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha=0.5, size=2)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))+scale_color_viridis()
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha=0.5, size=2)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))+    scale_color_viridis(discrete=TRUE)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation))+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))+    scale_color_viridis(discrete=TRUE)
geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))+    scale_color_viridis(discrete=TRUE)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))+    scale_color_viridis(discrete=TRUE)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.3, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))+    scale_color_viridis(discrete=TRUE)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))
hcl_palettes("sequential (multi-hue)", n = 7, plot = TRUE)
install.packages("colorspace")
library(colorspace)
hcl_palettes("sequential (multi-hue)", n = 7, plot = TRUE)
hcl_palettes("sequential (multi-hue)", n = 6, plot = TRUE)
hcl_palettes("qualitative", plot = TRUE, n= 6)
hcl_palettes("sequential (multi-hue)", n = 6, plot = TRUE)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_discrete_qualitative(palette = "Dark 3")
hcl_palettes("sequential (multi-hue)", n = 6, plot = TRUE)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_discrete_sequential(palette = "BluYi")
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_discrete_sequential(palette = "Blue-Yellow")
hcl_palettes("sequential (multi-hue)", n = 6, plot = TRUE)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_discrete_sequential(palette = "Viridis")
hcl_palettes("sequential (multi-hue)", n = 6, plot = TRUE)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_discrete_sequential(palette = "BluYl")
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_discrete_sequential(palette = "ag_GrnYl")
hcl_palettes("sequential (multi-hue)", n = 6, plot = TRUE)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_discrete_sequential(palette = "ag_GrnYl", rev = TRUE)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_discrete_sequential(palette = "ag_GrnYl", rev = FALSE)
hcl_palettes("sequential (multi-hue)", n = 6, plot = TRUE)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_discrete_sequential(palette = "Viridis", rev = FALSE)
hcl_palettes("sequential (multi-hue)", n = 6, plot = TRUE)
hcl_palettes("qualitative", plot = TRUE, n= 6)
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_manual(c("#bdc959","#74d34f","#6cca94","#52c3db","#8c8ee4","#db71cb"))
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_manual(values=c("#bdc959","#74d34f","#6cca94","#52c3db","#8c8ee4","#db71cb"))
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.8, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_manual(values=c("#bdc959","#74d34f","#6cca94","#52c3db","#8c8ee4","#db71cb"))
# Plot PC1 vs PC2
set1<-ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.8, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_manual(values=c("#d59145","#c0c45c","#7ed44d","#67cd9f","#64addf","#8a89e8"))
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.8, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_manual(values=c("#d59145","#c0c45c","#7ed44d","#67cd9f","#64addf","#8a89e8"))
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.8, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_manual(values=c("#d59145","#c0c45c","#7ed44d","#67cd9f","#64addf","#8a89e8"))
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.8, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_manual(values=c("#8a89e8","#64addf","#67cd9f","#7ed44d","#c0c45c","#d59145"))
ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual)) + scale_color_manual(values=c("#8a89e8","#64addf","#67cd9f","#7ed44d","#c0c45c","#d59145"))
make_plot<-function(pca, pop){
# Transform to data frame
out <- as.data.frame(t(pca), stringsAsFactors = FALSE)
# Get clean column names
tmpnames<-data.table::transpose(strsplit(colnames(out), "_"))
colnames(out)<-tmpnames[[length(tmpnames)]]
# Make full populations table
# Identify new individuals
new<-rownames(out)[! (rownames(out) %in% rownames(pop))]
# Make generic populations table content for new individuals
content<-matrix(rep(c("Unknown", "Unknown", "male"), length(new)), byrow = TRUE, ncol = 3)
# Name generic content table
rownames(content)<-new
colnames(content)<-colnames(pop)
# Join to populations table
populations<-rbind(pop, content)
# Add population info to table
out$Metapopulation<-populations[rownames(out),"super_pop"]
# Make subset with new individuals, which are unknown
incognita<-out[out$Metapopulation == "Unknown",]
incognita$individual<-rownames(incognita)
# This step is specific for Avery data, can be removed for other datasets as needed!
incognita$individual<-matrix(unlist(strsplit(incognita$individual, "[.]")), ncol=2, byrow = TRUE)[,2]
# Plot PC1 vs PC2
set1<-ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))
# Plot PC1 vs PC3
set2<-ggplot(out)+geom_point(aes(x = PC1, y = PC3, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC3,label=individual))
# Plot PC2 vs PC3
set3<-ggplot(out)+geom_point(aes(x = PC2, y = PC3, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC2,y = PC3,label=individual))+theme_grey()
# Return plots
return(list(set1, set2, set3))
}
plots<-make_plot(pca, pop)
legend <- cowplot::get_legend(plots[[1]])
colors<-scale_color_manual(values=c("#8a89e8","#64addf","#67cd9f","#7ed44d","#c0c45c","#d59145"))
prow <- plot_grid(
plots[[1]] + theme_ed + theme(legend.position="none") +colors,
plots[[2]] + theme_ed + theme(legend.position="none")+colors,
plots[[3]] + theme_ed + theme(legend.position="none")+colors,
align = 'vh',
labels = c("A", "B", "C"),
hjust = -1,
nrow = 2
)
# now add in the legend
# plot_row<-
prow + draw_grob(legend, 1/4, -1/4, 1, 1)
legend <- cowplot::get_legend(plots[[1]]+colors)
prow + draw_grob(legend, 1/4, -1/4, 1, 1)
title <- ggdraw() +
draw_label(
"PCA analysis using 1K Genomes as reference",
fontface = 'bold',
x = 0.01,
hjust = 0
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
plot_grid(
title, plot_row,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1)
)
# now add in the legend
# plot_row<-
prow + draw_grob(legend, 1/4, -1/4, 1, 1)
title <- ggdraw() +
draw_label(
"PCA analysis using 1K Genomes as reference",
fontface = 'bold',
x = 0.01,
hjust = 0
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
# now add in the legend
plot_row<-  prow + draw_grob(legend, 1/4, -1/4, 1, 1)
title <- ggdraw() +
draw_label(
"PCA analysis using 1K Genomes as reference",
fontface = 'bold',
x = 0.01,
hjust = 0
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
plot_grid(
title, plot_row,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1)
)
# now add in the legend
plot_row<-  prow + draw_grob(legend, 1/4, -1/4, 1, 1)
plot_row
title <- ggdraw() +
draw_label(
"PCA analysis using 1K Genomes as reference",
x = 0.01,
hjust = 0
) +
theme(
# add margin on the left of the drawing canvas,
# so title is aligned with left edge of first plot
plot.margin = margin(0, 0, 0, 7)
)
plot_grid(
title, plot_row,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1)
)
final_plot<-plot_grid(
title, plot_row,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1)
)
final_plot
png("rplot.jpg", width = 350, height = 350)
final_plot
dev.off()
png("rplot.png", width = 350, height = 350)
final_plot
dev.off()
png("rplot.png", width = 1000, height = 1000)
final_plot
dev.off()
png("rplot.png", width = 500, height = 500)
final_plot
dev.off()
png("rplot.png", width = 800, height = 800)
final_plot
dev.off()
png("rplot.png", width = 10 , height = 10 , units = "cm", res = 300)
final_plot
dev.off()
png("rplot.png", width = 30 , height = 30 , units = "cm", res = 300)
final_plot
dev.off()
png("rplot.png", width = 25 , height = 25 , units = "cm", res = 300)
final_plot
dev.off()
1/50
1/20
final_plot<-plot_grid(
title, plot_row,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(1/20, 1)
)
final_plot
png("rplot.png", width = 25 , height = 25 , units = "cm", res = 300)
final_plot
dev.off()
# Save legend
legend <- cowplot::get_legend(plots[[1]]+colors+ guides(shape = guide_legend(override.aes = list(size = 5))))
# Make plot grid
prow <- plot_grid(
plots[[1]] + theme_ed + theme(legend.position="none") +colors,
plots[[2]] + theme_ed + theme(legend.position="none")+colors,
plots[[3]] + theme_ed + theme(legend.position="none")+colors,
align = 'vh',
labels = c("A", "B", "C"),
hjust = -1,
nrow = 2
)
# Now add in the legend
plot_row<-  prow + draw_grob(legend, 1/4, -1/4, 1, 1)
# Create title
title <- ggdraw() +
draw_label(
"PCA analysis using 1K Genomes as reference",
x = 0.01,
hjust = 0
) +   theme( plot.margin = margin(0, 0, 0, 7)
)
# Final product
final_plot<-plot_grid(
title, plot_row,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(1/20, 1)
)
final_plot
# LOAD ARGUMENTS
# =========================================================================== #
args = commandArgs(trailingOnly=TRUE)
args[1]<-"analysis/2020-04-18_04_runPca/pcaResult.Rdata"
args[2]<-"data/raw/1000genomes_hg19/integrated_call_samples_v3.20130502.ALL.panel"
args[3]<-"tmp/"
# First specify the packages of interest
packages = c("ggplot2", "ggrepel", "cowplot", "rlang")
# Now load or install&load all
lapply(packages,FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
make_plot<-function(pca, pop){
# Transform to data frame
out <- as.data.frame(t(pca), stringsAsFactors = FALSE)
# Get clean column names
tmpnames<-data.table::transpose(strsplit(colnames(out), "_"))
colnames(out)<-tmpnames[[length(tmpnames)]]
# Make full populations table
# Identify new individuals
new<-rownames(out)[! (rownames(out) %in% rownames(pop))]
# Make generic populations table content for new individuals
content<-matrix(rep(c("Unknown", "Unknown", "male"), length(new)), byrow = TRUE, ncol = 3)
# Name generic content table
rownames(content)<-new
colnames(content)<-colnames(pop)
# Join to populations table
populations<-rbind(pop, content)
# Add population info to table
out$Metapopulation<-populations[rownames(out),"super_pop"]
# Make subset with new individuals, which are unknown
incognita<-out[out$Metapopulation == "Unknown",]
incognita$individual<-rownames(incognita)
# This step is specific for Avery data, can be removed for other datasets as needed!
incognita$individual<-matrix(unlist(strsplit(incognita$individual, "[.]")), ncol=2, byrow = TRUE)[,2]
# Plot PC1 vs PC2
set1<-ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))
# Plot PC1 vs PC3
set2<-ggplot(out)+geom_point(aes(x = PC1, y = PC3, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC3,label=individual))
# Plot PC2 vs PC3
set3<-ggplot(out)+geom_point(aes(x = PC2, y = PC3, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC2,y = PC3,label=individual))+theme_grey()
# Return plots
return(list(set1, set2, set3))
}
load(args[1]) # pca
pop<-read.table(args[2], row.names = 1, stringsAsFactors = FALSE, header = TRUE)
theme_ed <- theme(
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_rect(fill = NA, color = "grey75"),
axis.ticks = element_line(color = "grey85"),
panel.grid.major = element_line(color = "grey80", size = 0.2, linetype = "longdash"),
panel.grid.minor = element_line(color = "grey80", size = 0.2, linetype = "longdash"),
legend.key = element_blank())
colors<-scale_color_manual(values=c("#8a89e8","#64addf","#67cd9f","#7ed44d","#c0c45c","#d59145"))
# MAKE PLOT
# =========================================================================== #
# Make plots
plots<-make_plot(pca, pop)
# Save legend
legend <- cowplot::get_legend(plots[[1]]+colors+ guides(shape = guide_legend(override.aes = list(size = 5))))
# Make plot grid
prow <- plot_grid(
plots[[1]] + theme_ed + theme(legend.position="none") +colors,
plots[[2]] + theme_ed + theme(legend.position="none")+colors,
plots[[3]] + theme_ed + theme(legend.position="none")+colors,
align = 'vh',
labels = c("A", "B", "C"),
hjust = -1,
nrow = 2
)
# Now add in the legend
plot_row<-  prow + draw_grob(legend, 1/4, -1/4, 1, 1)
# Create title
title <- ggdraw() +
draw_label(
"PCA analysis using 1K Genomes as reference",
x = 0.01,
hjust = 0
) +   theme( plot.margin = margin(0, 0, 0, 7)
)
# Final product
final_plot<-plot_grid(
title, plot_row,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(1/20, 1)
)
# LOAD ARGUMENTS
# =========================================================================== #
args = commandArgs(trailingOnly=TRUE)
args[1]<-"analysis/2020-04-18_04_runPca/pcaResult.Rdata"
args[2]<-"data/raw/1000genomes_hg19/integrated_call_samples_v3.20130502.ALL.panel"
args[3]<-"tmp/"
# First specify the packages of interest
packages = c("ggplot2", "ggrepel", "cowplot")
# Now load or install&load all
lapply(packages,FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
# MAKE FUNCTION
# It will take PC1, PC2 and PC3 in all their cominations.
# =========================================================================== #
make_plot<-function(pca, pop){
# Transform to data frame
out <- as.data.frame(t(pca), stringsAsFactors = FALSE)
# Get clean column names
tmpnames<-data.table::transpose(strsplit(colnames(out), "_"))
colnames(out)<-tmpnames[[length(tmpnames)]]
# Make full populations table
# Identify new individuals
new<-rownames(out)[! (rownames(out) %in% rownames(pop))]
# Make generic populations table content for new individuals
content<-matrix(rep(c("Unknown", "Unknown", "male"), length(new)), byrow = TRUE, ncol = 3)
# Name generic content table
rownames(content)<-new
colnames(content)<-colnames(pop)
# Join to populations table
populations<-rbind(pop, content)
# Add population info to table
out$Metapopulation<-populations[rownames(out),"super_pop"]
# Make subset with new individuals, which are unknown
incognita<-out[out$Metapopulation == "Unknown",]
incognita$individual<-rownames(incognita)
# This step is specific for Avery data, can be removed for other datasets as needed!
incognita$individual<-matrix(unlist(strsplit(incognita$individual, "[.]")), ncol=2, byrow = TRUE)[,2]
# Plot PC1 vs PC2
set1<-ggplot(out)+geom_point(aes(x = PC1, y = PC2, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC2,label=individual))
# Plot PC1 vs PC3
set2<-ggplot(out)+geom_point(aes(x = PC1, y = PC3, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC1,y = PC3,label=individual))
# Plot PC2 vs PC3
set3<-ggplot(out)+geom_point(aes(x = PC2, y = PC3, color = Metapopulation), alpha = 0.5, size = 2.5)+
geom_text_repel(data=incognita,
aes(x = PC2,y = PC3,label=individual))+theme_grey()
# Return plots
return(list(set1, set2, set3))
}
# LOAD DATA
# =========================================================================== #
load(args[1]) # pca
pop<-read.table(args[2], row.names = 1, stringsAsFactors = FALSE, header = TRUE)
# SET AESTHETICS
# =========================================================================== #
theme_ed <- theme(
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_rect(fill = NA, color = "grey75"),
axis.ticks = element_line(color = "grey85"),
panel.grid.major = element_line(color = "grey80", size = 0.2, linetype = "longdash"),
panel.grid.minor = element_line(color = "grey80", size = 0.2, linetype = "longdash"),
legend.key = element_blank())
colors<-scale_color_manual(values=c("#8a89e8","#64addf","#67cd9f","#7ed44d","#c0c45c","#d59145"))
# Make plots
plots<-make_plot(pca, pop)
# Save legend
legend <- cowplot::get_legend(plots[[1]]+colors+ guides(shape = guide_legend(override.aes = list(size = 5))))
# Make plot grid
prow <- plot_grid(
plots[[1]] + theme_ed + theme(legend.position="none") +colors,
plots[[2]] + theme_ed + theme(legend.position="none")+colors,
plots[[3]] + theme_ed + theme(legend.position="none")+colors,
align = 'vh',
labels = c("A", "B", "C"),
hjust = -1,
nrow = 2
)
# Now add in the legend
plot_row<-  prow + draw_grob(legend, 1/4, -1/4, 1, 1)
# Create title
title <- ggdraw() +
draw_label(
"PCA analysis using 1K Genomes as reference",
x = 0.01,
hjust = 0
) +   theme( plot.margin = margin(0, 0, 0, 7)
)
# Final product
final_plot<-plot_grid(
title, plot_row,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(1/20, 1)
)
